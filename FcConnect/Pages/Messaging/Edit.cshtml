@page
@model FcConnect.Pages.Messaging.EditModel

@{
    ViewData["Title"] = "Message";
    string dateTimeSent = "";

}

<div class="container mb-5 pb-5 mt-5 pt-5">
@foreach (var message in Model.Conversation.Messages)
{
    if (message.DateTimeSent.Date == DateTime.Today)
    {
        dateTimeSent = message.DateTimeSent.ToString("HH:mm");
    }
    else
    {
        dateTimeSent = message.DateTimeSent.ToString("dd/MM/yyyy HH:mm");

    }
    if (Model.userId == message.Sender.Id.ToString())
    {
        <div class="row">            
            <div class="col">
                <div class="alert alert-success" style="border-radius:40px; border-bottom-right-radius:5px; word-wrap: break-word; max-width:fit-content;">
                    <p class="fw-lighter" style="text-align: center; margin-bottom: 8px;">@dateTimeSent</p>
                    <h6 class="alert-heading">@Html.DisplayFor(modelItem => message.Sender.Forename) @Html.DisplayFor(modelItem => message.Sender.Surname)</h6>
                    <p class="mb-0">@Html.DisplayFor(modelItem => message.MessageContent)</p>
                </div>
            </div>
            <div class="col"></div>
        </div>
    }
    else
    {
        <div class="row">
                <div class="col"></div>
            <div class="col d-flex justify-content-end">
                    <div class="alert alert-primary mw-75" style="border-radius:40px; border-bottom-left-radius:5px; word-wrap: break-word; max-width:fit-content;">
                    <p class="fw-lighter" style="text-align: center; margin-bottom: 8px;">@dateTimeSent</p>
                    <h6 class="alert-heading">@Html.DisplayFor(modelItem => message.Sender.Forename) @Html.DisplayFor(modelItem => message.Sender.Surname)</h6> 
                    <p class="mb-0">@Html.DisplayFor(modelItem => message.MessageContent)</p>
                </div>
            </div>
        </div>
    }
}
<div id="focus"></div>
</div>
<div class="container mt-5 fixed-bottom bg-white">
    <div class="row">
        <div class="col">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Conversation.Id" />
                <input type="hidden" asp-for="Conversation.LastMessageSent" class="form-control" />
                <div class="row justify-content-center pb-2 pt-4" style="background-color: #f5f7f9; border-top-left-radius: 10px; border-top-right-radius: 10px;">
                    <div class="col-sm-12 col-md-6">
                        <div class="input-group">
                            <input asp-for="NewMessageText" class="form-control" id="customTextField" type="text" placeholder="New Message..." />
                            <div class="input-group-append">
                                <button type="submit" id="customTextFieldButton" class="btn btn-primary"><i class="bi bi-send-fill"></i> &nbsp;Send</button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex justify-content-center">
                            <span class="pt-3 pb-1" asp-validation-for="NewMessageText"></span>
                        </div>
                    </div>
                </div>

            </form>
        </div>
    </div>

</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    
    <script>
        // reload page on message send
        $(function () {
            $('form').submit(function (e) {
                e.preventDefault(); 
                $.post($(this).attr('action'), $(this).serialize(), function (data) {
                    if (data.success) {
                        location.reload(); 
                    } else {
                        
                    }
                });
            });
        });



        $(function () {
            // Refresh page function
            function refreshPage() {
                
                var maxScrollYOffset = document.documentElement.scrollHeight - window.innerHeight;
                var currentScrollOffset = window.scrollY;
                // check user isn't typing
                //var inputText = $('#messageTextField').val();
                var inputText = document.getElementById('customTextField').value;
                if (inputText === null || inputText.length === 0) {
                    
                    if (maxScrollYOffset - currentScrollOffset > 400) {                        

                        // Set local storage data for current scroll position and max scroll value
                        localStorage.setItem('scrollPosition', currentScrollOffset);
                        localStorage.setItem('maxScrollPosition', maxScrollYOffset);

                        location.reload();
                    }
                    else 
                    {
                        location.reload();
                    }
                }
            }
            // Refresh every 30 seconds
            setInterval(refreshPage, 30000);
        });
    </script>
}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        
        // Get local storage data
        var pos = localStorage.getItem('scrollPosition');
        var newMaxScrollYOffset = document.documentElement.scrollHeight - window.innerHeight;
        var priorMaxScrollOffset = localStorage.getItem('maxScrollPosition');

        // check if this in the initial page load or the user is already at the bottom of the conversation
        if (pos != null) {
            // scroll to the user's current position
            window.scrollTo({
                top: pos,
                behavior: 'smooth' 
            });
            // check if the max offset value has changed since before refresh, if so - new message
            if (newMaxScrollYOffset > priorMaxScrollOffset) 
            {
                alert('New Message Received');
            }

        }
        else 
        {
            window.scrollTo(0, document.body.scrollHeight);
        }

        // Removing local storage data
        localStorage.removeItem('scrollPosition');
        localStorage.removeItem('priorMaxScrollOffset');

        // Clearing all local storage data
        localStorage.clear();

        // Hide the footer if needed
        document.querySelector("footer").style.visibility = "hidden";
    });
</script>
